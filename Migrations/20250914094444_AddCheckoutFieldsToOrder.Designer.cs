// <auto-generated />
using System;
using CuaHangQuanAo.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CuaHangQuanAo.Migrations
{
    [DbContext(typeof(CuaHangBanQuanAoContext))]
    [Migration("20250914094444_AddCheckoutFieldsToOrder")]
    partial class AddCheckoutFieldsToOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CuaHangQuanAo.Entities.Account", b =>
                {
                    b.Property<int>("AccId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccId"));

                    b.Property<string>("AccRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccId")
                        .HasName("PK__Account__91CBC39834CE7F97");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("NameCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId")
                        .HasName("pk_CategoryID");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<int?>("AccId")
                        .HasColumnType("int")
                        .HasColumnName("AccID");

                    b.Property<string>("AddressName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CustomerId")
                        .HasName("pk_CustomerID");

                    b.HasIndex("AccId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("AccId")
                        .HasColumnType("int")
                        .HasColumnName("AccID");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Position")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EmployeeId")
                        .HasName("pk_Employee_EmployeeID");

                    b.HasIndex("AccId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Item", b =>
                {
                    b.Property<int>("ItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemsId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ItemsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SellPrice")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ItemsId")
                        .HasName("pk_ItemsID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Order", b =>
                {
                    b.Property<int>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrdersID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdersId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrdersId")
                        .HasName("pk_OrderID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.OrdersDetail", b =>
                {
                    b.Property<int>("OrdersDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrdersDetailsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdersDetailsId"));

                    b.Property<int?>("ItemsId")
                        .HasColumnType("int")
                        .HasColumnName("ItemsID");

                    b.Property<int?>("OrdersId")
                        .HasColumnType("int")
                        .HasColumnName("OrdersID");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrdersDetailsId")
                        .HasName("pk_OrdersDetails");

                    b.HasIndex("ItemsId");

                    b.HasIndex("OrdersId");

                    b.ToTable("OrdersDetails");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.PasswordResetToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PK__Password__3214EC0756A440B2");

                    b.HasIndex("AccountId");

                    b.ToTable("PasswordResetToken", (string)null);
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.ProductVariant", b =>
                {
                    b.Property<int>("ProductVariantsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductVariantsId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PriceModifier")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductVariantsId")
                        .HasName("PK__ProductV__980BBDC77E00FBBE");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StorageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageId"));

                    b.Property<int?>("ImportCost")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("ImportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProductVariantsId")
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantsID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.HasKey("StorageId")
                        .HasName("pk_Storage_Storage");

                    b.HasIndex("ProductVariantsId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Storage", (string)null);
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("AddressContact")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SupplierId")
                        .HasName("pk_Supplier");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Customer", b =>
                {
                    b.HasOne("CuaHangQuanAo.Entities.Account", "Acc")
                        .WithMany("Customers")
                        .HasForeignKey("AccId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Customer_Account");

                    b.Navigation("Acc");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Employee", b =>
                {
                    b.HasOne("CuaHangQuanAo.Entities.Account", "Acc")
                        .WithMany("Employees")
                        .HasForeignKey("AccId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Account");

                    b.Navigation("Acc");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Item", b =>
                {
                    b.HasOne("CuaHangQuanAo.Entities.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_Items_CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Order", b =>
                {
                    b.HasOne("CuaHangQuanAo.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_Orders_CustomerID");

                    b.HasOne("CuaHangQuanAo.Entities.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_Orders_EmployeeID");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.OrdersDetail", b =>
                {
                    b.HasOne("CuaHangQuanAo.Entities.Item", "Items")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("ItemsId")
                        .HasConstraintName("fk_ItemsID");

                    b.HasOne("CuaHangQuanAo.Entities.Order", "Orders")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("OrdersId")
                        .HasConstraintName("fk_OrdersDetails_OrdersID");

                    b.Navigation("Items");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.PasswordResetToken", b =>
                {
                    b.HasOne("CuaHangQuanAo.Entities.Account", "Account")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshToken_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.ProductVariant", b =>
                {
                    b.HasOne("CuaHangQuanAo.Entities.Item", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductVa__Produ__236943A5");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Storage", b =>
                {
                    b.HasOne("CuaHangQuanAo.Entities.ProductVariant", "ProductVariants")
                        .WithMany("Storages")
                        .HasForeignKey("ProductVariantsId")
                        .HasConstraintName("fk_Storage_ItemsID");

                    b.HasOne("CuaHangQuanAo.Entities.Supplier", "Supplier")
                        .WithMany("Storages")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK__Storage__Supplie__5DCAEF64");

                    b.Navigation("ProductVariants");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Account", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("PasswordResetTokens");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Item", b =>
                {
                    b.Navigation("OrdersDetails");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Order", b =>
                {
                    b.Navigation("OrdersDetails");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.ProductVariant", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("CuaHangQuanAo.Entities.Supplier", b =>
                {
                    b.Navigation("Storages");
                });
#pragma warning restore 612, 618
        }
    }
}
