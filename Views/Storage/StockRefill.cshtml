@model CuaHangQuanAo.Models.ViewModels.StorageListVm
@{
    ViewData["Title"] = "Danh sách nhập kho";
    Layout = "_AdminLayout";
    int currentPage = Model.Page;
    int totalPages = Model.TotalPages;
    int totalRecords = Model.TotalRecords;
    int pageSize = Model.PageSize;
    int startRecord = (currentPage - 1) * pageSize + 1;
    int endRecord = Math.Min(currentPage * pageSize, totalRecords);

    // Hàm trợ giúp để lấy tên trạng thái dựa trên mã số
    string GetStatusText(int status)
    {
        return status switch
        {
            1 => "Hoạt động",
            2 => "Tạm ngưng",
            3 => "Ngưng hoàn toàn",
            _ => "Hoạt động"
        };
    }

    // Hàm trợ giúp để lấy class CSS cho nút trạng thái
    string GetStatusButtonClass(int status)
    {
        return status switch
        {
            1 => "btn-outline-success",
            2 => "btn-outline-warning",
            3 => "btn-outline-danger",
            _ => "btn-outline-success"
        };
    }

    // Hàm trợ giúp để lấy biểu tượng cho trạng thái
    string GetStatusIcon(int status)
    {
        return status switch
        {
            1 => "bi-check-circle",
            2 => "bi-pause-circle",
            3 => "bi-x-circle",
            _ => "bi-check-circle"
        };
    }
}

<!-- CSS omitted for brevity, keep as is -->
<style>
    .page-title-box {
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        color: white;
        border-radius: 10px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .card {
        transition: all 0.3s;
        border: none;
        border-radius: 0.8rem;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1) !important;
        }

    .table th {
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.82rem;
        letter-spacing: 0.5px;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(37, 117, 252, 0.05);
    }

    .action-buttons {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem; /* Khoảng cách đều giữa các nút */
    }

    .btn-action {
        min-width: 90px;
        border-radius: 24px !important;
        font-weight: 500;
        font-size: 0.70rem;
        padding: 0.18rem 0.9rem;
        border: 2px solid;
        background: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s;
        line-height: 1.2;
    }

    btn-action i {
        font-size: 1em;
        margin-right: 0.4em;
        margin-bottom: 0;
    }


    .btn-action.detail {
        color: #1976d2;
        border-color: #1976d2;
    }

        .btn-action.detail:hover {
            background: #e3f0fd;
        }

    .btn-action.edit {
        color: #f9a825;
        border-color: #f9a825;
    }

        .btn-action.edit:hover {
            background: #fffbe6;
        }

    .btn-action.delete {
        color: #d32f2f;
        border-color: #d32f2f;
    }

        .btn-action.delete:hover {
            background: #fdeaea;
        }


    .action-buttons .btn {
        border-radius: 50px;
        padding: 0.4rem 1rem;
        transition: all 0.2s;
    }

        .action-buttons .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .badge-cost {
        background: linear-gradient(45deg, #11998e, #38ef7d);
        color: white;
        border-radius: 50px;
        padding: 0.5rem 1rem;
        font-weight: 500;
    }

    .empty-state {
        padding: 3rem 2rem;
        opacity: 0.8;
    }

        .empty-state i {
            font-size: 4rem;
            opacity: 0.5;
        }

    .add-button {
        font-weight: 600;
        padding: 0.6rem 1.5rem;
        border-radius: 50px;
        box-shadow: 0 4px 10px rgba(40, 167, 69, 0.3);
    }

    .table-responsive {
        border-radius: 0.8rem;
        overflow: hidden;
    }

    .supplier-name {
        font-weight: 500;
        color: #495057;
    }

    .date-badge {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 0.3rem 0.6rem;
        font-size: 0.875rem;
    }

    .pagination {
        display: flex;
        list-style: none;
        padding-left: 0;
    }

    .page-item {
        margin: 0 2px;
    }

    .page-link {
        color: #007bff;
        border: 1px solid #dee2e6;
        padding: 6px 12px;
        border-radius: 4px;
        text-decoration: none;
        background: #fff;
        transition: background 0.2s;
    }

    .page-item.active .page-link {
        background: #007bff;
        color: #fff;
        border-color: #007bff;
    }

    .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background: #f8f9fa;
    }

    .page-link:hover {
        background: #e9ecef;
    }

    /* CSS cho phân trang */
    .pagination .page-link {
        color: #6a11cb;
        border-color: #dee2e6;
    }

    .pagination .page-item.active .page-link {
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        border-color: #6a11cb;
    }

    .pagination .page-item.disabled .page-link {
        color: #6c757d;
    }

    .pagination .page-link:hover {
        color: #5a0cb9;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }

    .pagination .page-item.active .page-link:hover {
        color: #fff;
    }

    /* CSS cho thông báo */
    .alert-success {
        background-color: #d1e7dd;
        border-color: #badbcc;
        color: #0f5132;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c2c7;
        color: #842029;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .alert-dismissible .btn-close {
        padding: 1.25rem 1rem;
    }

    .product-info {
        display: flex;
        align-items: center;
    }

    .product-image {
        width: 40px;
        height: 40px;
        border-radius: 4px;
        margin-right: 10px;
        object-fit: cover;
        background-color: #f0f0f0;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .product-details {
        display: flex;
        flex-direction: column;
    }

    .product-name {
        font-weight: 500;
        color: #2d3748;
        margin-bottom: 0.25rem;
    }

    .product-meta {
        font-size: 0.85rem;
        color: #718096;
    }

    /* CSS cho dropdown trạng thái */
    .dropdown-item {
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
    }

        .dropdown-item.active {
            background-color: #f8f9fa;
            color: #212529;
            font-weight: 600;
        }

        .dropdown-item:hover {
            background-color: #f0f0f0;
        }

    .btn-outline-success {
        color: #198754;
        border-color: #198754;
    }

    .btn-outline-warning {
        color: #fd7e14;
        border-color: #fd7e14;
    }

    .btn-outline-danger {
        color: #dc3545;
        border-color: #dc3545;
    }

    /* Toast thông báo */
    .toast-container {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 9999;
    }


</style>

<div class="container py-4">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-1"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-1"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="page-title-box d-flex justify-content-between align-items-center">
        <div>
            <h2 class="mb-1 fw-bold">
                <i class="bi bi-inbox me-2"></i>Danh sách nhập kho
            </h2>
            <p class="text-white-50 mb-0">Quản lý thông tin nhập kho và hàng hóa</p>
        </div>
        <a class="btn btn-light add-button" href="@Url.Action("Functions_Create", "Storage")">
            <i class="bi bi-plus-circle-fill me-2"></i> Thêm phiếu nhập
        </a>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle bg-primary bg-opacity-10 p-3">
                            <i class="bi bi-box-seam text-primary fs-4"></i>
                        </div>
                        <div class="ms-3">
                            <h6 class="mb-1 text-muted">Tổng phiếu nhập</h6>
                            <h4 class="mb-0 fw-bold">@totalRecords</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle bg-success bg-opacity-10 p-3">
                            <i class="bi bi-currency-dollar text-success fs-4"></i>
                        </div>
                        <div class="ms-3">
                            <h6 class="mb-1 text-muted">Tổng chi phí nhập</h6>
                            <h4 class="mb-0 fw-bold">@string.Format("{0:N0} đ", Model.TotalCost)</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle bg-info bg-opacity-10 p-3">
                            <i class="bi bi-calendar-event text-info fs-4"></i>
                        </div>
                        <div class="ms-3">
                            <h6 class="mb-1 text-muted">Lần nhập gần nhất</h6>
                            <h4 class="mb-0 fw-bold">
                                @(Model.LatestImportDate ?? "Chưa có")
                            </h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Data Card -->
    <div class="card shadow">
        <div class="card-header bg-white py-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-table me-2 text-primary"></i> Dữ liệu nhập kho
                </h5>
                <div class="input-group" style="width: 300px;">
                    <form method="get" class="d-flex w-100">
                        <input type="text" class="form-control" placeholder="Tìm kiếm sản phẩm..."
                               name="searchTerm" value="@Model.SearchTerm">
                        <button class="btn btn-outline-secondary" type="submit">
                            <i class="bi bi-search"></i>
                        </button>
                    </form>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead>
                        <tr class="bg-light">
                            <th scope="col" style="width:5%">#</th>
                            <th scope="col" style="width:15%">
                                <i class="bi bi-calendar me-1 text-secondary"></i> Ngày nhập
                            </th>
                            <th scope="col" style="width:20%">
                                <i class="bi bi-box me-1 text-secondary"></i> Thông tin sản phẩm
                            </th>
                            <th scope="col" style="width:15%">
                                <i class="bi bi-building me-1 text-secondary"></i> Nhà cung cấp
                            </th>
                            <th scope="col" style="width:5%" class="text-center">
                                <i class="bi bi-123 me-1 text-secondary"></i> Số lượng
                            </th>
                            <th scope="col" style="width:10%" class="text-center">
                                <i class="bi bi-cash me-1 text-secondary"></i> Tổng tiền
                            </th>
                            <th scope="col" style="width:15%" class="text-center">
                                <i class="bi bi-toggle-on me-1 text-secondary"></i> Trạng thái
                            </th>
                            <th scope="col" class="text-center" style="width:15%">
                                <i class="bi bi-sliders me-1 text-secondary"></i> Hành động
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Storages != null && Model.Storages.Any())
                        {
                            int stt = (currentPage - 1) * pageSize + 1;
                            foreach (var item in Model.Storages)
                            {
                                <tr>
                                    <td class="fw-bold text-secondary">@stt</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-calendar-event me-2 text-primary"></i>
                                            <span>@item.ImportDate?.ToString("dd/MM/yyyy")</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="product-info">
                                            <div class="product-image">
                                                <i class="bi bi-box text-primary"></i>
                                            </div>
                                            <div class="product-details">
                                                <span class="product-name">@item.ProductVariants?.Product?.ItemsName</span>
                                                <span class="product-meta">
                                                    Size: @item.ProductVariants?.Size,
                                                    Color: @item.ProductVariants?.Color
                                                </span>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-building me-2 text-success"></i>
                                            <span>@item.Supplier?.SupplierName</span>
                                        </div>
                                        <small class="text-muted">@item.Supplier?.PhoneNumber</small>
                                    </td>
                                    <td class="text-center">
                                        <span class="fw-bold">@item.Quantity</span>
                                    </td>
                                    <td class="text-center">
                                        @{
                                            var total = (item.Quantity ?? 0) * (item.ImportCost ?? 0);
                                        }
                                        <span class="fw-bold text-success">@string.Format("{0:N0} đ", total)</span>
                                    </td>
                                    <!-- Cột trạng thái sản phẩm -->
                                    <td class="text-center">
                                        @{
                                            var productId = item.ProductVariants?.Product?.ItemsId ?? 0;
                                            var currentStatus = item.ProductVariants?.Product?.Status ?? 1;
                                        }

                                        <div class="dropdown">
                                            <button class="btn btn-sm @GetStatusButtonClass(currentStatus) dropdown-toggle"
                                                    type="button"
                                                    id="dropdownStatus_@item.StorageId"
                                                    data-bs-toggle="dropdown"
                                                    aria-expanded="false"
                                                    data-product-id="@productId">
                                                <i class="bi @GetStatusIcon(currentStatus) me-1"></i>
                                                <span class="status-text">@GetStatusText(currentStatus)</span>
                                            </button>
                                            <ul class="dropdown-menu" aria-labelledby="dropdownStatus_@item.StorageId">
                                                <li>
                                                    <a class="dropdown-item @(currentStatus == 1 ? "active" : "")"
                                                       href="javascript:void(0)"
                                                       onclick="updateProductStatus(@productId, 1)">
                                                        <i class="bi bi-check-circle me-2 text-success"></i>Hoạt động
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item @(currentStatus == 2 ? "active" : "")"
                                                       href="javascript:void(0)"
                                                       onclick="updateProductStatus(@productId, 2)">
                                                        <i class="bi bi-pause-circle me-2 text-warning"></i>Tạm ngưng
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item @(currentStatus == 3 ? "active" : "")"
                                                       href="javascript:void(0)"
                                                       onclick="updateProductStatus(@productId, 3)">
                                                        <i class="bi bi-x-circle me-2 text-danger"></i>Ngưng hoàn toàn
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                    <!-- Cột hành động -->
                                    <td>
                                        <div class="action-buttons">
                                            <a class="btn btn-action detail" href="@Url.Action("Functions_Details", "Storage", new { id = item.StorageId })" title="Chi tiết">
                                                <i class="bi bi-eye me-1"></i> Chi tiết
                                            </a>
                                            <a class="btn btn-action edit" href="@Url.Action("Functions_Edit", "Storage", new { id = item.StorageId })" title="Sửa">
                                                <i class="bi bi-pencil-square me-1"></i> Sửa
                                            </a>
                                            <a class="btn btn-action delete" href="@Url.Action("Functions_Delete", "Storage", new { id = item.StorageId })" title="Xóa">
                                                <i class="bi bi-trash me-1"></i> Xóa
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                                stt++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center text-muted p-5">
                                    <i class="bi bi-inbox-fill mb-3" style="font-size: 2.5rem; opacity: 0.5;"></i>
                                    <h5>Không có dữ liệu nhập kho</h5>
                                    <p class="mb-0">Vui lòng thêm phiếu nhập kho mới hoặc thay đổi tiêu chí tìm kiếm</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card-footer bg-white py-3">
            <div class="d-flex justify-content-between align-items-center">
                <span class="text-muted small">Hiển thị @(Model.Storages?.Count() ?? 0) phiếu nhập kho</span>

                @if (Model.LowStockOnly)
                {
                    <div class="alert alert-warning mb-4">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-exclamation-triangle-fill me-2 fs-4"></i>
                            <div>
                                <h5 class="mb-1">Đang lọc: Sản phẩm sắp hết hàng</h5>
                                <p class="mb-0">Đang hiển thị các sản phẩm có số lượng tồn kho dưới 10 đơn vị</p>
                            </div>
                        </div>
                        <a href="@Url.Action("StockRefill", "Storage")" class="btn btn-sm btn-outline-secondary mt-2">
                            <i class="bi bi-x-circle me-1"></i> Xóa bộ lọc
                        </a>
                    </div>
                }

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        Hiển thị @Model.PageSize phiếu nhập kho
                    </div>
                    <nav>
                        <ul class="pagination">
                            <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("StockRefill", new { page = Model.Page - 1, pageSize = Model.PageSize, searchTerm = Model.SearchTerm, lowStockOnly = Model.LowStockOnly })">«</a>
                            </li>
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.Page ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("StockRefill", new { page = i, pageSize = Model.PageSize, searchTerm = Model.SearchTerm, lowStockOnly = Model.LowStockOnly })">@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.Page == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("StockRefill", new { page = Model.Page + 1, pageSize = Model.PageSize, searchTerm = Model.SearchTerm, lowStockOnly = Model.LowStockOnly })">»</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            setTimeout(function () {
                $(".alert").alert('close');
            }, 5000);

            // Khởi tạo toasts
            initToasts();
        });

        // Hàm cập nhật trạng thái sản phẩm
        function updateProductStatus(productId, status) {
            if (!productId) return;

            // Hiển thị indicator đang xử lý
            var $allButtons = $('[data-product-id="' + productId + '"]');
            $allButtons.prop('disabled', true);
            $allButtons.html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý...');

            $.ajax({
                url: '@Url.Action("UpdateProductStatus", "Storage")',
                type: 'POST',
                data: {
                    productId: productId,
                    status: status
                },
                success: function(response) {
                    if (response.success) {
                        // Hiển thị thông báo thành công
                        showToast('Thành công', response.message, 'success');

                        // Cập nhật giao diện
                        var statusText = '';
                        var statusIcon = '';
                        var btnClass = '';

                        switch(status) {
                            case 1:
                                statusText = 'Hoạt động';
                                statusIcon = 'bi-check-circle';
                                btnClass = 'btn-outline-success';
                                break;
                            case 2:
                                statusText = 'Tạm ngưng';
                                statusIcon = 'bi-pause-circle';
                                btnClass = 'btn-outline-warning';
                                break;
                            case 3:
                                statusText = 'Ngưng hoàn toàn';
                                statusIcon = 'bi-x-circle';
                                btnClass = 'btn-outline-danger';
                                break;
                        }

                        // Cập nhật tất cả các nút có cùng productId trên trang
                        $allButtons.each(function() {
                            var $btn = $(this);
                            $btn.prop('disabled', false);
                            $btn.removeClass('btn-outline-success btn-outline-warning btn-outline-danger')
                                .addClass(btnClass);
                            $btn.html('<i class="bi ' + statusIcon + ' me-1"></i><span class="status-text">' + statusText + '</span>');

                            // Cập nhật trạng thái active trong dropdown
                            var $dropdownMenu = $btn.next('.dropdown-menu');
                            $dropdownMenu.find('.dropdown-item').removeClass('active');
                            $dropdownMenu.find('.dropdown-item').eq(status - 1).addClass('active');
                        });
                    } else {
                        // Hiển thị thông báo lỗi
                        showToast('Lỗi', response.message || 'Có lỗi xảy ra khi cập nhật trạng thái.', 'danger');

                        // Khôi phục nút
                        $allButtons.prop('disabled', false);
                        // Tìm trạng thái hiện tại để khôi phục
                        var $activeItem = $allButtons.first().next('.dropdown-menu').find('.dropdown-item.active');
                        var currentStatus = $activeItem.index() + 1;
                        var currentStatusText = $activeItem.text().trim();
                        var currentStatusIcon = $activeItem.find('i').attr('class').split(' ').filter(cls => cls.startsWith('bi-'))[0];
                        var currentBtnClass = 'btn-outline-' + ($activeItem.find('i').hasClass('text-success') ? 'success' :
                                             $activeItem.find('i').hasClass('text-warning') ? 'warning' : 'danger');

                        $allButtons.each(function() {
                            var $btn = $(this);
                            $btn.removeClass('btn-outline-success btn-outline-warning btn-outline-danger')
                                .addClass(currentBtnClass);
                            $btn.html('<i class="bi ' + currentStatusIcon + ' me-1"></i><span class="status-text">' + currentStatusText + '</span>');
                        });
                    }
                },
                error: function() {
                    // Hiển thị thông báo lỗi
                    showToast('Lỗi', 'Có lỗi xảy ra khi kết nối với máy chủ.', 'danger');

                    // Khôi phục nút
                    $allButtons.prop('disabled', false);
                    // TODO: Khôi phục trạng thái ban đầu tương tự như phần error trong success
                }
            });
        }

        // Khởi tạo toasts
        function initToasts() {
            // Thêm container cho toasts nếu chưa có
            if ($('.toast-container').length === 0) {
                $('body').append('<div class="toast-container"></div>');
            }
        }

        // Hiển thị toast thông báo
        function showToast(title, message, type) {
            var toastId = 'toast-' + Date.now();
            var toastHtml = `
                <div class="toast" id="${toastId}" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header bg-${type} text-white">
                        <strong class="me-auto">${title}</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;

            $('.toast-container').append(toastHtml);
            var toast = new bootstrap.Toast(document.getElementById(toastId), {
                delay: 5000
            });
            toast.show();

            // Tự động xóa toast sau khi ẩn
            $('#' + toastId).on('hidden.bs.toast', function () {
                $(this).remove();
            });
        }
    </script>
}
