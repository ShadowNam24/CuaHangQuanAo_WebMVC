@model CuaHangQuanAo.Models.ViewModels.ProductDetailVm
@{
    ViewData["Title"] = Model.Item.ItemsName;
    Layout = "_Layout";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">

<div class="container mt-4">
    <div class="row">
        <!-- Product Image -->
        <div class="col-md-5">
            <img id="mainImage"
                 src="~/Images/products/@(Model.MainImage ?? "no-img.png")"
                 alt="@Model.Item.ItemsName"
                 class="img-fluid rounded shadow">
        </div>

        <!-- Product Info -->
        <div class="col-md-7">
            <h2>@Model.Item.ItemsName</h2>
            <h4 id="priceInfo" class="text-danger">
                @String.Format("{0:N0}", Model.Item.SellPrice) ₫
            </h4>
            <p id="stockInfo" class="text-success"></p>

            <div class="mb-3">
                <label for="colorSelect" class="form-label fw-bold">Màu sắc</label>
                <select id="colorSelect" class="form-select">
                    <option value="">-- Chọn màu --</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="sizeSelect" class="form-label fw-bold">Kích thước</label>
                <select id="sizeSelect" class="form-select">
                    <option value="">-- Chọn size --</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="quantity" class="form-label fw-bold">Số lượng</label>
                <input type="number" id="quantity" class="form-control" value="1" min="1">
            </div>

            @Html.AntiForgeryToken()

            <button id="addToCartBtn" class="btn btn-primary">
                <i class="bi bi-cart-plus"></i> Thêm vào giỏ hàng
            </button>
        </div>
    </div>
</div>
<input type="hidden" id="variantsData" value='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AvailableVariants))' />

@section Scripts {
    <script>
        $(document).ready(function () {

            let productId = @Model.Item.ItemsId;
            let variants = [];
            try {
                variants = JSON.parse($("#variantsData").val());
            } catch { variants = []; }

            // Populate color and size dropdowns with all available options
            function populateDropdowns() {
                const colors = [...new Set(variants.map(v => v.Color))];
                const sizes = [...new Set(variants.map(v => v.Size))];

                let colorSelect = $("#colorSelect");
                let sizeSelect = $("#sizeSelect");
                colorSelect.empty().append('<option value="">-- Chọn màu --</option>');
                sizeSelect.empty().append('<option value="">-- Chọn size --</option>');
                colors.forEach(c => colorSelect.append(`<option value="${c}">${c}</option>`));
                sizes.forEach(s => sizeSelect.append(`<option value="${s}">${s}</option>`));
            }

            populateDropdowns();

            // When color changes, filter sizes
            $("#colorSelect").change(function () {
                const selectedColor = $(this).val();
                const sizeSelect = $("#sizeSelect");
                const prevSize = sizeSelect.val();

                // Find sizes available for this color
                const availableSizes = [...new Set(variants.filter(v => v.Color === selectedColor).map(v => v.Size))];
                sizeSelect.find("option").each(function () {
                    if (!$(this).val() || availableSizes.includes($(this).val())) {
                        $(this).prop("disabled", false);
                    } else {
                        $(this).prop("disabled", true);
                    }
                });

                // If previous size is not available, reset
                if (prevSize && !availableSizes.includes(prevSize)) {
                    sizeSelect.val("");
                }

                updateVariantPreview();
            });

            // When size changes, filter colors
            $("#sizeSelect").change(function () {
                const selectedSize = $(this).val();
                const colorSelect = $("#colorSelect");
                const prevColor = colorSelect.val();

                // Find colors available for this size
                const availableColors = [...new Set(variants.filter(v => v.Size === selectedSize).map(v => v.Color))];
                colorSelect.find("option").each(function () {
                    if (!$(this).val() || availableColors.includes($(this).val())) {
                        $(this).prop("disabled", false);
                    } else {
                        $(this).prop("disabled", true);
                    }
                });

                // If previous color is not available, reset
                if (prevColor && !availableColors.includes(prevColor)) {
                    colorSelect.val("");
                }

                updateVariantPreview();
            });

            // Update preview (image, stock, price)
            function updateVariantPreview() {
                let color = $("#colorSelect").val();
                let size = $("#sizeSelect").val();
                if (!color || !size) return;

                let variant = variants.find(v => v.Color === color && v.Size === size);
                if (variant) {
                    $("#mainImage").attr("src", "/Images/" + (variant.Image || "no-img.png"));
                    $("#stockInfo").text(variant.StockQuantity > 0 ? `Còn ${variant.StockQuantity} sản phẩm` : "Hết hàng");
                    $("#priceInfo").text(Number(variant.Price).toLocaleString("vi-VN") + " ₫");
                } else {
                    $("#stockInfo").text("Không khả dụng");
                }
            }

            // Add to cart logic remains the same (use variant.VariantId)
            $("#addToCartBtn").click(function () {
                let color = $("#colorSelect").val();
                let size = $("#sizeSelect").val();
                let qty = $("#quantity").val();

                if (!color || !size) {
                    alert("Vui lòng chọn màu và size trước khi thêm vào giỏ hàng.");
                    return;
                }

                let variant = variants.find(v => v.Color === color && v.Size === size);
                if (!variant) {
                    alert("Không tìm thấy biến thể phù hợp.");
                    return;
                }

                $.ajax({
                    url: '/Cart/AddToCart',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ variantId: variant.VariantId, quantity: qty }),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (cartRes) {
                        if (cartRes.success) {
                            alert(cartRes.message);
                            $("#cartCount").text(cartRes.cartCount);
                        } else {
                            alert(cartRes.message);
                        }
                    },
                    error: function () {
                        alert("Không thể thêm vào giỏ hàng.");
                    }
                });
            });
        });
    </script>
}