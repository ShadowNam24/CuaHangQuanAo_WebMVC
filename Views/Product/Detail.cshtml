@model CuaHangQuanAo.Models.ViewModels.ProductDetailVm
@{
    ViewData["Title"] = Model.Item.ItemsName;
    Layout = "_Layout";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">

<div class="container mt-4">
    <div class="row">
        <!-- Product Image -->
        <div class="col-md-5">
            <div class="product-image-container" id="imageContainer">
                <img id="mainImage"
                     src="~/Images/products/@(Model.MainImage ?? "no-img.png")"
                     alt="@Model.Item.ItemsName"
                     class="img-fluid"
                     style="min-height: 400px; object-fit: cover;">
                <div id="imageLoading" class="image-loading d-none">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Product Info -->
        <div class="col-md-7">
            <h2>@Model.Item.ItemsName</h2>
            <h4 id="priceInfo" class="price-info">
                @String.Format("{0:N0}", Model.Item.SellPrice) ₫
            </h4>
            <p id="stockInfo" class="stock-info"></p>

            <div class="variant-selector">
                <label for="colorSelect" class="form-label">Màu sắc</label>
                <select id="colorSelect" class="form-select">
                    <option value="">-- Chọn màu --</option>
                </select>
            </div>

            <div class="variant-selector">
                <label for="sizeSelect" class="form-label">Kích thước</label>
                <select id="sizeSelect" class="form-select">
                    <option value="">-- Chọn size --</option>
                </select>
            </div>

            <div class="variant-selector">
                <label for="quantity" class="form-label">Số lượng</label>
                <input type="number" id="quantity" class="form-control" value="1" min="1">
            </div>

            @Html.AntiForgeryToken()

            <button id="addToCartBtn" class="btn btn-primary add-to-cart-btn" @(User.Identity.IsAuthenticated ? "" : "disabled")>
                <i class="bi bi-cart-plus"></i> Thêm vào giỏ hàng
            </button>
            @if (!User.Identity.IsAuthenticated)
            {
                <div class="text-danger mt-2">Bạn cần đăng nhập để thêm vào giỏ hàng.</div>
            }
        </div>
    </div>
</div>
<input type="hidden" id="variantsData" value='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AvailableVariants))' />

@section Scripts {
    <script>
        $(document).ready(function () {

            let productId = @Model.Item.ItemsId;
            let variants = [];
            try {
                variants = JSON.parse($("#variantsData").val());
            } catch { variants = []; }

            // Populate color and size dropdowns with all available options
            function populateDropdowns() {
                const colors = [...new Set(variants.map(v => v.Color))];
                const sizes = [...new Set(variants.map(v => v.Size))];

                let colorSelect = $("#colorSelect");
                let sizeSelect = $("#sizeSelect");
                colorSelect.empty().append('<option value="">-- Chọn màu --</option>');
                sizeSelect.empty().append('<option value="">-- Chọn size --</option>');
                colors.forEach(c => colorSelect.append(`<option value="${c}">${c}</option>`));
                sizes.forEach(s => sizeSelect.append(`<option value="${s}">${s}</option>`));
            }

            populateDropdowns();

            // Auto-select first available color and size if available
            if (variants.length > 0) {
                const firstColor = [...new Set(variants.map(v => v.Color))][0];
                const firstSize = [...new Set(variants.filter(v => v.Color === firstColor).map(v => v.Size))][0];
                
                if (firstColor) {
                    $("#colorSelect").val(firstColor);
                    // Update image for the selected color
                    updateImageByColor(firstColor);
                }
                if (firstSize) $("#sizeSelect").val(firstSize);
                
                // Trigger initial update
                updateVariantPreview();
            }

            // When color changes, filter sizes and update image
            $("#colorSelect").change(function () {
                const selectedColor = $(this).val();
                const sizeSelect = $("#sizeSelect");
                const prevSize = sizeSelect.val();

                // Find sizes available for this color
                const availableSizes = [...new Set(variants.filter(v => v.Color === selectedColor).map(v => v.Size))];
                sizeSelect.find("option").each(function () {
                    if (!$(this).val() || availableSizes.includes($(this).val())) {
                        $(this).prop("disabled", false);
                    } else {
                        $(this).prop("disabled", true);
                    }
                });

                // If previous size is not available, reset
                if (prevSize && !availableSizes.includes(prevSize)) {
                    sizeSelect.val("");
                }

                // Update image based on color only
                updateImageByColor(selectedColor);
                updateVariantPreview();
            });

            // When size changes, filter colors (but don't update image)
            $("#sizeSelect").change(function () {
                const selectedSize = $(this).val();
                const colorSelect = $("#colorSelect");
                const prevColor = colorSelect.val();

                // Find colors available for this size
                const availableColors = [...new Set(variants.filter(v => v.Size === selectedSize).map(v => v.Color))];
                colorSelect.find("option").each(function () {
                    if (!$(this).val() || availableColors.includes($(this).val())) {
                        $(this).prop("disabled", false);
                    } else {
                        $(this).prop("disabled", true);
                    }
                });

                // If previous color is not available, reset
                if (prevColor && !availableColors.includes(prevColor)) {
                    colorSelect.val("");
                }

                // Only update variant info (price, stock), not image
                updateVariantPreview();
            });

            // Update image based on color only
            function updateImageByColor(selectedColor) {
                if (!selectedColor) {
                    // Reset to default image if no color selected
                    $("#mainImage").attr("src", "/Images/products/@(Model.MainImage ?? "no-img.png")");
                    return;
                }

                // Find first variant with this color to get the image
                let colorVariant = variants.find(v => v.Color === selectedColor);
                if (colorVariant && colorVariant.Image) {
                    let imageFile = colorVariant.Image.trim();
                    let newImageSrc = "/Images/products/" + imageFile;
                    
                    // Show loading
                    $("#imageLoading").removeClass("d-none");
                    $("#imageContainer").addClass("loading");
                    
                    // Create image object to check before updating
                    let img = new Image();
                    img.onload = function() {
                        $("#mainImage").attr("src", newImageSrc);
                        $("#imageLoading").addClass("d-none");
                        $("#imageContainer").removeClass("loading");
                    };
                    img.onerror = function() {
                        // If image doesn't exist, use default
                        $("#mainImage").attr("src", "/Images/products/no-img.png");
                        $("#imageLoading").addClass("d-none");
                        $("#imageContainer").removeClass("loading");
                    };
                    img.src = newImageSrc;
                } else {
                    // No specific image for this color, use default
                    $("#mainImage").attr("src", "/Images/products/@(Model.MainImage ?? "no-img.png")");
                }
            }

            // Update preview (stock, price) - without image update
            function updateVariantPreview() {
                let color = $("#colorSelect").val();
                let size = $("#sizeSelect").val();
                
                if (!color || !size) {
                    $("#priceInfo").text(Number(@Model.Item.SellPrice).toLocaleString("vi-VN") + " ₫");
                    $("#stockInfo").text("");
                    return;
                }

                let variant = variants.find(v => v.Color === color && v.Size === size);
                if (variant) {
                    // Cập nhật thông tin kho
                    let stockText = variant.AvailableInStorage > 0 ? `Còn ${variant.AvailableInStorage} sản phẩm` : "Hết hàng";
                    $("#stockInfo").text(stockText).removeClass("in-stock out-of-stock").addClass(variant.AvailableInStorage > 0 ? "in-stock" : "out-of-stock");
                    
                    // Cập nhật giá
                    let price = Number(variant.FinalPrice);
                    if (isNaN(price) || price <= 0) {
                        price = Number(@Model.Item.SellPrice) || 0;
                    }
                    $("#priceInfo").text(price.toLocaleString("vi-VN") + " ₫");
                    
                    // Cập nhật trạng thái nút thêm vào giỏ hàng
                    if (variant.AvailableInStorage > 0) {
                        $("#addToCartBtn").prop("disabled", false);
                    } else {
                        $("#addToCartBtn").prop("disabled", true);
                    }
                } else {
                    $("#stockInfo").text("Không khả dụng");
                    $("#priceInfo").text(Number(@Model.Item.SellPrice).toLocaleString("vi-VN") + " ₫");
                    $("#addToCartBtn").prop("disabled", true);
                }
            }


            // Add to cart logic remains the same (use variant.VariantId)
            $("#addToCartBtn").click(function () {
                if ($(this).prop("disabled")) {
                    alert("Bạn cần đăng nhập để thêm vào giỏ hàng.");
                    return;
                }

                let color = $("#colorSelect").val();
                let size = $("#sizeSelect").val();
                let qty = $("#quantity").val();

                if (!color || !size) {
                    alert("Vui lòng chọn màu và size trước khi thêm vào giỏ hàng.");
                    return;
                }

                let variant = variants.find(v => v.Color === color && v.Size === size);
                if (!variant) {
                    alert("Không tìm thấy biến thể phù hợp.");
                    return;
                }

                $.ajax({
                    url: '/Cart/AddToCart',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ variantId: variant.VariantId, quantity: qty }),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (cartRes) {
                        if (cartRes.success) {
                            alert(cartRes.message);
                            // Update cart count in header
                            if (typeof updateCartCount === 'function') {
                                updateCartCount(cartRes.cartCount);
                            } else {
                                $("#cartCount").text(cartRes.cartCount);
                            }
                        } else {
                            alert(cartRes.message);
                        }
                    },
                    error: function () {
                        alert("Không thể thêm vào giỏ hàng.");
                    }
                });
            });
        });
    </script>
}