@model CuaHangQuanAo.Models.LoginViewModel
@{
    ViewData["Title"] = "Đăng nhập";
    Layout = "_AuthenLayout";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
<style>
    /* ==== Auth Page Styles ==== */
    .auth-wrap {
        min-height: calc(100vh - 140px);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem 1rem;
        background: linear-gradient(135deg,#f7f7f7 0%, #ffffff 40%, #f1f5f9 100%);
    }

    .auth-card {
        width: 100%;
        max-width: 960px;
        border: 0;
        border-radius: 24px;
        overflow: hidden;
        box-shadow: 0 20px 60px rgba(0,0,0,.12);
    }

    .auth-left {
        background: url('/Images/demo/bg-fashion.jpg') center/cover no-repeat;
        position: relative;
        min-height: 560px;
    }

        .auth-left::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(135deg,rgba(0,0,0,.55),rgba(0,0,0,.35));
        }

    .branding {
        position: absolute;
        z-index: 2;
        inset: 24px auto auto 24px;
        color: #fff;
        display: flex;
        align-items: center;
        gap: .5rem;
        letter-spacing: 2px;
    }

        .branding .dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #ffd166;
            display: inline-block;
        }

    .auth-caption {
        position: absolute;
        z-index: 2;
        bottom: 24px;
        left: 24px;
        right: 24px;
        color: #fff;
    }

        .auth-caption h3 {
            font-weight: 800;
            margin: 0 0 .25rem;
        }

        .auth-caption p {
            opacity: .9;
            margin: 0;
        }

    .auth-right {
        background: #fff;
        padding: 2.25rem 2rem;
    }
    h4.auth-title {
        font-weight: 800;
        letter-spacing: .5px;
        margin: 0 0 .25rem;
    }

    .auth-sub {
        color: #6b7280;
        margin-bottom: 1.25rem;
    }

    .form-floating > .form-control {
        padding: 1rem .75rem;
        height: 3.3rem;
    }

    .input-icon {
        position: absolute;
        left: .75rem;
        top: 50%;
        transform: translateY(-50%);
        color: #9ca3af;
    }

    .input-with-icon {
        padding-left: 2.3rem;
    }

    .btn-primary {
        background: #111827;
        border-color: #111827;
        border-radius: 12px;
        padding: .8rem 1rem;
        font-weight: 700;
        letter-spacing: .3px;
    }

        .btn-primary:hover {
            background: #e67e22;
            border-color: #e67e22;
        }

    .btn-outline {
        border: 1px solid #e5e7eb;
        background: #fff;
        color: #111827;
        border-radius: 12px;
        padding: .75rem 1rem;
        font-weight: 600;
    }

    .btn-outline:hover {
        border-color: #111827;
    }

    .divider {
        display: flex;
        align-items: center;
        gap: .75rem;
        color: #9ca3af;
        margin: 1rem 0;
    }

    .divider::before, .divider::after {
        content: "";
        height: 1px;
        flex: 1;
        background: #e5e7eb;
    }

    .small-links a {
        color: #111827;
        text-decoration: none;
    }

    .small-links a:hover {
        text-decoration: underline;
    }

    .no-select {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-touch-callout: none;
        -webkit-tap-highlight-color: transparent;
    }
</style>

<div class="auth-wrap">
    <div class="card auth-card">
        <div class="row g-0">
            <!-- Left visual -->
            <div class="col-lg-6 position-relative auth-left">
                <div class="branding">
                    <span class="dot"></span>
                    <a asp-controller="Home" asp-action="Index" class="text-white text-decoration-none fw-bold">
                        ShopQuanAo
                    </a>
                </div>

                <div class="auth-caption">
                    <h3>Chào mừng trở lại</h3>
                    <p>Đăng nhập để tiếp tục mua sắm và theo dõi đơn hàng của bạn.</p>
                </div>
            </div>

            <!-- Right form -->
            <div class="col-lg-6 auth-right">
                <h4 class="auth-title">Đăng nhập</h4>
                <div class="auth-sub">Rất vui được gặp lại bạn 👋</div>

                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @TempData["SuccessMessage"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }

                <form asp-action="Login" method="post" autocomplete="off">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-2"></div>
                    <div class="mb-3 position-relative">
						<input type="hidden" name="returnUrl" value="@ViewBag.ReturnURL" />
                        <i class="bi bi-person input-icon"></i>
                        <input asp-for="UsernameOrEmail" class="form-control input-with-icon" placeholder="Email hoặc tên đăng nhập" required autofocus/>
                        <span asp-validation-for="UsernameOrEmail" class="text-danger small"></span>
                    </div>

                    <div class="mb-2 position-relative">
                        <i class="bi bi-shield-lock input-icon"></i>
                        <div class="input-group">
                            <input asp-for="Password" class="form-control input-with-icon no-select" type="password" id="LoginPassword" placeholder="Mật khẩu" />
                            <button type="button" class="btn btn-outline" id="toggleLoginPassword" title="Hiện/ẩn mật khẩu">
                                <i class="bi bi-eye" id="LoginPasswordIcon"></i>
                            </button>
                        </div>
                        <span asp-validation-for="Password" class="text-danger small"></span>
                    </div>

                    <div class="d-flex justify-content-between align-items-center mb-3 small-links">
                        <div class="form-check">
                            <input asp-for="RememberMe" class="form-check-input" id="rememberMeChk" />
                            <label asp-for="RememberMe" class="form-check-label"></label>
                        </div>
                        <a asp-action="ForgotPassword">Quên mật khẩu?</a>
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" id="LoginConfirm">
                            <i class="bi bi-box-arrow-in-right me-1"></i> Đăng nhập
                        </button>
                    </div>
                </form>

                <div class="text-center mt-3 small-links">
                    Chưa có tài khoản? <a asp-action="Register">Đăng ký ngay</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        class PasswordSecurity {
            constructor(selector) {
                this.inputs = document.querySelectorAll(selector);
                this.init();
            }

            init() {
                this.inputs.forEach(input => {
                    this.secureInput(input);
                    this.addToggleButton(input);
                });
            }

            secureInput(input) {
                const blockedEvents = [
                    'paste', 'copy', 'cut', 'drag', 'drop',
                    'contextmenu', 'selectstart', 'dragstart'
                ];

                blockedEvents.forEach(event => {
                    input.addEventListener(event, this.preventAction.bind(this));
                });

                input.addEventListener('keydown', this.blockShortcuts.bind(this));

                // Apply CSS protection
                input.style.userSelect = 'none';
                input.style.webkitUserSelect = 'none';
                input.style.mozUserSelect = 'none';
                input.style.webkitTouchCallout = 'none';
                input.style.webkitTapHighlightColor = 'transparent';
            }

            addToggleButton(input) {
                // only for password type
                if (input.type !== "password") return;

                // find sibling button by ID convention (your markup has it already)
                const btn = document.getElementById('toggleLoginPassword');
                const icon = document.getElementById('LoginPasswordIcon');

                if (btn && icon) {
                    btn.addEventListener('click', () => {
                        if (input.type === 'password') {
                            input.type = 'text';
                            icon.classList.replace('bi-eye', 'bi-eye-slash');
                        } else {
                            input.type = 'password';
                            icon.classList.replace('bi-eye-slash', 'bi-eye');
                        }
                    });
                }
            }

            preventAction(e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                this.showSecurityWarning();
                return false;
            }

            blockShortcuts(e) {
                const blockedCombos = [
                    { ctrl: true, key: 'c' },
                    { ctrl: true, key: 'v' },
                    { ctrl: true, key: 'x' },
                    { ctrl: true, key: 'a' }
                ];

                const isBlocked = blockedCombos.some(combo =>
                    (combo.ctrl && (e.ctrlKey || e.metaKey)) &&
                    e.key.toLowerCase() === combo.key
                );

                if (isBlocked) {
                    e.preventDefault();
                    this.showSecurityWarning();
                }
            }

            showSecurityWarning() {
                const warning = document.createElement('div');
                warning.className = 'alert alert-warning alert-dismissible fade show position-fixed';
                warning.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
                warning.innerHTML = `
                    🔒 Copy/paste disabled for security reasons
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                document.body.appendChild(warning);

                setTimeout(() => {
                    if (warning.parentNode) {
                        warning.remove();
                    }
                }, 3000);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Initialize PasswordSecurity for password + submit button
            new PasswordSecurity('#LoginPassword, #LoginConfirm');
        });
    </script>
}
